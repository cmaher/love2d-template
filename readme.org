* Minimal Fennel Love2D Setup

Derived from https://gitlab.com/alexjgriffith/min-love2d-fennel

Check out the makefile and conf.lua files in =$PROJECT_NAME=, updating them with information relevant to your game.

You can enter =love .= in the =$PROJECT_NAME= directory to run your game, or =make run=.

Replace all =TODO= entries in =Makefile= and =conf.lua=

* Emacs Setup

Once you install the latest version of [[https://gitlab.com/technomancy/fennel-mode][fennel-mode]], you can run
=C-u M-x run-lisp to launch a repl.

This build uses =gamestate= rather than Phil's approach to scene seperation and puts all your =.fnl= files into a =/src= directory. It also provides a seperate makefile that handles this layout.

Note, any macros will have to be placed in the root of the project, inthe =lib= folder, or in the =macros= folder (this can be modified in =main.lua= and the =FENNEL= var in the =Makefile=)

Presently the only layouts are =clone= and =seperate-source=. If you want to make your own check out the =.duplicate= directory to see how they work.

* Release Process

Use =make linux=, =make windows=,  =make mac=, or =make web= to create targets for each platform, or =make release= to make all four. Check out the makefile for more commands, and remember to edit your game data in it!

* Targeting the development branch of love (12.0) - LINUX ONLY
You can target the development branch of love (version 12.0) by setting the `LOVE_VERSION` parameter in the makefile to 12.0. Note that because we are working from a github artifact, rather than a release, you will also have to pass in your github username and a github PAT.

** Getting a PAT
To download artifacts created by the Github actions CI you will need to get an access token from "settings -> developer settings -> personal access tokens". The token needs `workflow` and `actions:read` permissions.

** Creating a credentials.private file
By default the makefile looks for `credentials.private` in the root directory of the project. `*.private` is part of `.gitignore` so personal information stored here will not be part of the git history or get pushed to a remote server.

The contents should look something like this:
#+BEGIN_SRC bash
GITHUB_USERNAME=username
GITHUB_PAT=PAT
#+END_SRC

Note: this is presently linux only, however it may be expanded in the future to cover macos and windows.

* Phil's Modal Callbacks (PMC)

Phil Hegelberg's [[https://gitlab.com/technomancy/exo-encounter-667/][exo-encounter-667]] is structured using a modal callback system. Each game state has a mode and each mode has a series of specific callbacks.

If you design your game as a series of states in a very simple state machine, for example *start-screen*, *play* and *end*, with unidirectional progression, you can easily separate the logic for each state into state/mode specific callbacks. As an example, in order to have state dependant rendering that differs between start-screen,play and end you could provide a *draw* callback for each of those states. Similarly if we need state dependent logic and keyboard input we could provide *update* and *keyboard* callbacks. As you iterate you can add and remove callbacks and states/modes as needed with very little friction.

* License

GPLv3 - This applies to the template. It does not apply to whatever you make with the template (except the included  code).
